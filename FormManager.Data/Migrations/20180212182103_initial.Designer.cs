// <auto-generated />
using FormManager.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using Microsoft.EntityFrameworkCore.ValueGeneration;
using System;

namespace FormManager.Data.Migrations
{
    [DbContext(typeof(FormContext))]
    [Migration("20180212182103_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("FormManager.Domain.CaseWorker", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Location");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("CaseWorker");
                });

            modelBuilder.Entity("FormManager.Domain.Employer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<string>("CVR");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Employer");
                });

            modelBuilder.Entity("FormManager.Domain.Form", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CaseWorkerId");

                    b.Property<DateTime>("DateProcessed");

                    b.Property<DateTime>("DateSubmitted");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<bool>("IsProcessed");

                    b.HasKey("Id");

                    b.HasIndex("CaseWorkerId");

                    b.ToTable("Forms");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Form");
                });

            modelBuilder.Entity("FormManager.Domain.Member", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("City");

                    b.Property<string>("Cpr");

                    b.Property<string>("FirstName");

                    b.Property<int>("FormId");

                    b.Property<int>("Gender");

                    b.Property<string>("LastName");

                    b.Property<string>("Street");

                    b.HasKey("Id");

                    b.HasIndex("FormId")
                        .IsUnique();

                    b.ToTable("Member");
                });

            modelBuilder.Entity("FormManager.Domain.MemberInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateOfInfo");

                    b.Property<string>("Key");

                    b.Property<int>("MemberId");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("MemberId");

                    b.ToTable("MemberInfo");
                });

            modelBuilder.Entity("FormManager.Domain.UnemployedForm", b =>
                {
                    b.HasBaseType("FormManager.Domain.Form");

                    b.Property<DateTime>("DateUnemployed");

                    b.Property<int?>("PreviousEmployerId");

                    b.HasIndex("PreviousEmployerId");

                    b.ToTable("UnemployedForm");

                    b.HasDiscriminator().HasValue("UnemployedForm");
                });

            modelBuilder.Entity("FormManager.Domain.Form", b =>
                {
                    b.HasOne("FormManager.Domain.CaseWorker", "CaseWorker")
                        .WithMany("Forms")
                        .HasForeignKey("CaseWorkerId");
                });

            modelBuilder.Entity("FormManager.Domain.Member", b =>
                {
                    b.HasOne("FormManager.Domain.Form", "Form")
                        .WithOne("Member")
                        .HasForeignKey("FormManager.Domain.Member", "FormId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FormManager.Domain.MemberInfo", b =>
                {
                    b.HasOne("FormManager.Domain.Member", "Member")
                        .WithMany("MemberInfo")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FormManager.Domain.UnemployedForm", b =>
                {
                    b.HasOne("FormManager.Domain.Employer", "PreviousEmployer")
                        .WithMany()
                        .HasForeignKey("PreviousEmployerId");
                });
#pragma warning restore 612, 618
        }
    }
}
